#-*- mode: org -*-
#+STARTUP: showall
#+OPTIONS: toc:2
#+AUTHOR: Leonid Krashanoff <leo@krashanoff.com>

* Entrypoint for my Emacs config

** Packages

#+begin_src emacs-lisp
  (use-package magit)
  (use-package general)
  (use-package evil)
  (use-package transpose-frame)
  
(require 'use-package)
(use-package darcula-theme
  :ensure t
  :config
  :init (load-theme 'darcula t)
  (set-frame-font "CommitMono"))
#+end_src

* Keybinds

** God mode

There's a plugin - God mode - that makes it so that you don't have to
kill your wrists every time you want to use a keybind that you haven't
configured yourself.

#+begin_src emacs-lisp
  (require 'god-mode)
#+end_src

** Evil

Evil is pretty essential to keeping me happy in this god-forsaken "editor".
So is general. These guys are great. While I'm here, I set up some little
tricks to make general:
a) Play nice with Evil
b) Play nice with Emacs

The second one is really important because I bind the hell out of my keys,
and Emacs traditionally only wants you to bind like... five prefix keys
or something.

#+begin_src emacs-lisp
  (require 'evil)
  (evil-mode 1)

  (require 'general)
  (general-auto-unbind-keys)
  (general-evil-setup t)
#+end_src

** Rebindings

By default, Emacs will open the buffer list in another window. This fixes that.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'buffer-menu)
#+end_src

** Leader Map

The ~general.el~ docs kind of suck at explaining how to set a dispatching key with a timeout.
I am still trying to figure out how to replicate that Vim-like binding where you can still
macro in ~INSERT~ mode, but alas, not yet.

#+begin_src emacs-lisp
  (defconst leader ";")
  (defun insert-leader () (interactive) (insert leader))

  (general-create-definer normal-leader-def
    :prefix "\\"
    :prefix-command 'normal-leader-map)
  ;;(general-create-definer insert-leader-def
   ;; :prefix "C-x 6"
    ;;:prefix-command 'insert-leader-map)

  (defun insert-semi ()
    (interactive)
    (insert leader))
  ;;(general-def
   ;; :state 'insert
    ;;leader
    ;;(general-key-dispatch
    ;;  'insert-semi
    ;;  :timeout 0.25
    ;;  :inherit-keymap insert-leader-map))

  (normal-leader-def "S-x" 'execute-extended-command)
  (normal-leader-def "g" 'magit-status)
#+end_src

** A quick note on dispatch mapping

So in the `general.el` docs, they suggest that for simulating Vim-style
mappings where you can just `inoremap <leader>j <ESC>j`, you can use this
feature for "dispatch mapping". I've tried using this to reasonable success,
but there's caveats.

The default mapping they suggest doesn't use anything complicated in `general`,
like global keymaps, and when I tried using it (see my commented-out stuff above)
I haven't had much luck.

So for now, I hardcode everything, but I _really_ don't want to do this going
forward. I think the ultimate solution here will be to create a thunk so that
these leader mappings are computed at the bottom of this file. /shrug

#+begin_src emacs-lisp
  (general-def
    :state 'insert
    leader
    (general-key-dispatch
      'insert-semi
      :timeout 0.1
      ";" 'evil-escape
      "w" 'save-buffer
      "C-h" 'save-buffer
      "C-j" 'save-buffer
      "C-k" 'save-buffer
    ))
#+end_src

** Terminal and splits

Need a nice way to open terminal and navigate splits.

#+begin_src emacs-lisp
  (normal-leader-def "T" 'term)
  ;;(normal-leader-def "C-h" 'evil-window-left)
  (normal-leader-def "C-j" 'evil-window-down)
  (normal-leader-def "C-k" 'evil-window-up)
  (normal-leader-def "C-l" 'evil-window-right)
  ;;(insert-leader-def "C-h" 'evil-window-left)
  ;;(insert-leader-def "C-j" 'evil-window-down)
  ;;(insert-leader-def "C-k" 'evil-window-up)
  ;;(insert-leader-def "C-l" 'evil-window-right)
#+end_src

** Moving lines

*** TODO <2023-05-20 Sat> Add line movement

#+begin_src emacs-lisp
#+end_src

** Web Browser

Sometimes EWW can be handy! It's great if you want to just pop open a tab and quickly reference StackOverflow
or w/e.

#+begin_src emacs-lisp
  (defun open-homepage
    ()
    "Open eww to my homepage :)"
    (interactive)
    (eww "https://duckduckgo.com"))
  (normal-leader-def "W" 'open-homepage)
#+end_src

** Evil Configuration

There are a few things that I found to annoy me with ~evil~. For one, the
recommended [[https://github.com/cofi/evil-leader][leader key plugin]] kind of stinks, hence why I'm using general.
For another, the undo system isn't set up out of the box, and also it
doesn't rebind ~<C-u>~ out of the box to the vim-like half-page scroll up.

Universal argument is important, though.

#+begin_src
universal-argument is an interactive byte-compiled Lisp function in
‘simple.el’.

(universal-argument)

Begin a numeric argument for the following command.
Digits or minus sign following M-x universal-argument make up the numeric argument.
M-x universal-argument following the digits or minus sign ends the argument.
M-x universal-argument without digits or minus sign provides 4 as argument.
Repeating M-x universal-argument without digits or minus sign
 multiplies the argument by 4 each time.
For some commands, just M-x universal-argument by itself serves as a flag
that is different in effect from any particular numeric argument.
These commands include C-SPC and M-x start-kbd-macro.

[back]
#+end_src

So I rebound it to ~C-f~.

#+begin_src emacs-lisp
  (setq evil-undo-system 'undo-redo)
  (general-define-key "C-f" 'universal-argument)
  (general-define-key
    :states 'normal
    "C-u" 'evil-scroll-up)
#+end_src

** Core Functionality

Now that the legwork is out of the way, here are the core keybinds that
I use.

I like to have semicolon as my leader. It makes certain operations
inconvenient, though, so I have it bound here on a prefix timeout as
described in [[https://github.com/noctuid/general.el#mapping-under-non-prefix-keys][general.el's docs]].

#+begin_src emacs-lisp
  (defun save-then-normal ()
    "Save the buffer, then return to evil normal mode."
    (interactive)
    (save-excursion
      (save-buffer)
      (evil-force-normal-state)))
  (normal-leader-def
    :states 'normal
    "w" 'save-then-normal)
#+end_src

Core movement is important, and I like having options to break out of
insert mode easily. These bindings are broken right now, though, since
I can't figure out how to do clean prefix mapping.

#+begin_src emacs-lisp
  (normal-leader-def
    :states 'normal
    "h" 'backward-char)
  (normal-leader-def
    :states 'normal
    "j" 'next-line)
  (normal-leader-def
    :states 'normal
    "k" 'previous-line)
  (normal-leader-def
    :states 'normal
    "l" 'forward-char)
#+end_src

I also like line numbers most of the time just so I have some points of
reference, but they aren't always necessary, so I toggle them with
~<leader>-l~:

#+begin_src emacs-lisp
  (normal-leader-def
    :states 'normal
    "l" 'linum-mode)
#+end_src

* Orgmode is good

Hey, you know what got me on this journey in the first place? Orgmode!!

The following sets up Orgmode so that we have some nice lettered-lists for my notes.
I also like using my leader for handling these cases.

#+begin_src emacs-lisp
  (require 'org)
  (setq org-agenda-files "~/org/agenda.org")
  (setq org-todo-keywords
	'((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
  (setq org-list-allow-alphabetical t)
  (setq org-return-follows-link t)
#+end_src

The below block binds the ability to go straight to my agenda file.

#+begin_src emacs-lisp
  (defun open-agenda
    ()
    "Open my agenda file"
    (interactive)
    (find-file "~/org/agenda.org"))
  (normal-leader-def
    :states 'normal
    "o a" 'open-agenda)
#+end_src

The below is useful for keeping a calendar.

#+begin_src emacs-lisp
  (normal-leader-def
    :states 'normal
    :keymaps 'org-mode-map
    "a" 'org-agenda
    "c" 'org-capture
    "o ." 'org-time-stamp)
  (normal-leader-def
    :keymaps 'org-mode-map
    "C" 'calendar)
#+end_src

Since evil doesn't really play nice with Orgmode, I also have ~<TAB>~
available.

#+begin_src emacs-lisp
  (general-define-key
    :keymaps 'org-mode-map
    :states 'normal
    "\t" 'org-cycle)
#+end_src

* IRC

#+begin_src emacs-lisp
  (setq erc-compute-nick "leo")
#+end_src

* See Also

- https://stackoverflow.com/questions/16186843/inline-code-in-org-mode
- https://emacs.stackexchange.com/questions/278/how-do-i-display-line-numbers-in-emacs-not-in-the-mode-line
- https://github.com/noctuid/general.el
- https://github.com/abo-abo/swiper
- https://github.com/emacs-evil/evil
- http://blog.binchen.org/posts/use-general-el-to-provide-multiple-leader-key-in-evil-mode/
- https://www.emacswiki.org/emacs/ERC
- https://www.emacswiki.org/emacs/ModeLineConfiguration#h5o-1
- https://github.com/FrostyX/dotfiles/blob/master/.emacs.d/frostyx.org
